import { Telegraf, Markup } from 'telegraf';
import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

dotenv.config();

const bot = new Telegraf(process.env.BOT_TOKEN);
const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, '../web')));

// –ü—Ä–æ—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ start
bot.start(async (ctx) => {
  try {
    console.log('üì® –ü–æ–ª—É—á–µ–Ω /start –æ—Ç:', ctx.from.first_name);
    
    const welcomeMessage = `
üé∞ *–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å –≤ Pixelstars Casino!* ‚≠ê

–ü—Ä–∏–≤–µ—Ç, ${ctx.from.first_name}! 
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö –∏–≥—Ä!

üåê *–û—Ç–∫—Ä–æ–π—Ç–µ –∏–≥—Ä—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ:*
https://pixelstars1.onrender.com

üéÆ *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*
‚Ä¢ üöÄ –†–∞–∫–µ—Ç–∞ - –∏–≥—Ä–∞ –Ω–∞ –º–Ω–æ–∂–∏—Ç–µ–ª–∏ (24/7)
‚Ä¢ ‚è± 10-—Å–µ–∫—É–Ω–¥–Ω—ã–µ –ø–µ—Ä–µ—Ä—ã–≤—ã –º–µ–∂–¥—É —Ä–∞—É–Ω–¥–∞–º–∏
‚Ä¢ üí∞ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ-–≤—ã–≤–æ–¥–∞
‚Ä¢ ‚≠ê –°—Ç–∞–≤–∫–∏ –æ—Ç 50+ –∑–≤–µ–∑–¥
‚Ä¢ ‚ú® –ö—Ä–∞—Å–∏–≤—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–≤–µ–∑–¥—ã

–ü—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –≤—ã—à–µ –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ!`;

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.webApp('üé∞ –ò–≥—Ä–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ', 'https://pixelstars1.onrender.com')],
      [Markup.button.callback('‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', 'info')],
      [Markup.button.callback('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'stats')]
    ]);

    await ctx.reply(welcomeMessage, {
      parse_mode: 'Markdown',
      reply_markup: keyboard.reply_markup
    });
    
    console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ start:', error.message);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
bot.action('stats', async (ctx) => {
  try {
    await ctx.answerCbQuery();
    
    const statsMessage = `
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞:*

üë§ –ò–≥—Ä–æ–∫: ${ctx.from.first_name}
‚≠ê –ë–∞–ª–∞–Ω—Å: 1000 –∑–≤–µ–∑–¥ (—Å—Ç–∞—Ä—Ç–æ–≤—ã–π)
üéÆ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: 0
üí∞ –í—Å–µ–≥–æ –≤—ã–∏–≥—Ä–∞–Ω–æ: 0 –∑–≤–µ–∑–¥
üìà –õ—É—á—à–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å: 1.00x

üöÄ *–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã:*
–ò–≥—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7!
–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å: https://pixelstars1.onrender.com`;

    await ctx.reply(statsMessage, { parse_mode: 'Markdown' });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ stats:', error.message);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
bot.action('info', async (ctx) => {
  try {
    await ctx.answerCbQuery();
    
    const infoMessage = `
‚ÑπÔ∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–∑–∏–Ω–æ:*

üéÆ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã:*
‚Ä¢ üöÄ –†–∞–∫–µ—Ç–∞ - –∏–≥—Ä–∞ –Ω–∞ –º–Ω–æ–∂–∏—Ç–µ–ª–∏
‚Ä¢ üéÅ –ö–µ–π—Å—ã - –æ—Ç–∫—Ä—ã–≤–∞–π –∏ –ø–æ–ª—É—á–∞–π –ø—Ä–∏–∑—ã

üîó *–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:*
1. –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É: https://pixelstars1.onrender.com
2. –ò–≥—Ä–∞–π—Ç–µ –ø—Ä—è–º–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
3. –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã!

‚úÖ *–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:*
‚Ä¢ 24/7 —Ä–∞–±–æ—Ç–∞
‚Ä¢ 10-—Å–µ–∫—É–Ω–¥–Ω—ã–µ –ø–µ—Ä–µ—Ä—ã–≤—ã
‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ-–≤—ã–≤–æ–¥–∞
‚Ä¢ –°—Ç–∞–≤–∫–∏ –æ—Ç 50+ –∑–≤–µ–∑–¥
‚Ä¢ –ö—Ä–∞—Å–∏–≤—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–≤–µ–∑–¥—ã`;

    await ctx.reply(infoMessage, { parse_mode: 'Markdown' });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ info:', error.message);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞:', err);
  console.error('–ö–æ–Ω—Ç–µ–∫—Å—Ç:', ctx.update);
});

// –ò–≥—Ä–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
let gameState = {
  phase: 'waiting', // waiting, flying, crashed
  multiplier: 1.0,
  startTime: Date.now() + 10000, // –Ω–∞—á–∞–ª–æ —á–µ—Ä–µ–∑ 10 —Å–µ–∫
  crashPoint: 1.0 + Math.random() * 4, // —Å–ª—É—á–∞–π–Ω—ã–π –∫—Ä–∞—à –æ—Ç 1 –¥–æ 5
  players: 0
};

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
function startGame() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã —Ä–∞–∫–µ—Ç–∞...');
  runGameCycle();
}

function runGameCycle() {
  // –§–∞–∑–∞ –æ–∂–∏–¥–∞–Ω–∏—è (10 —Å–µ–∫—É–Ω–¥)
  gameState.phase = 'waiting';
  gameState.startTime = Date.now() + 10000;
  gameState.crashPoint = 1.0 + Math.random() * 4;
  gameState.multiplier = 1.0;
  
  console.log(`‚≠ê –ù–æ–≤—ã–π —Ä–∞—É–Ω–¥, –∫—Ä–∞—à-–ø–æ–∏–Ω—Ç: ${gameState.crashPoint}`);
  
  setTimeout(() => {
    // –§–∞–∑–∞ –ø–æ–ª–µ—Ç–∞
    gameState.phase = 'flying';
    gameState.startTime = Date.now();
    
    const flyDuration = (gameState.crashPoint - 1) * 10000; // 10 —Å–µ–∫ –Ω–∞ –∫–∞–∂–¥—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å
    
    setTimeout(() => {
      // –§–∞–∑–∞ –∫—Ä–∞—à–∞
      gameState.phase = 'crashed';
      gameState.multiplier = gameState.crashPoint;
      
      console.log(`üí• –ó–≤–µ–∑–¥–∞ —Ä–∞–∑–±–∏–ª–∞—Å—å –Ω–∞ x${gameState.crashPoint.toFixed(2)}`);
      
      setTimeout(() => {
        runGameCycle(); // –ù–æ–≤—ã–π —Ü–∏–∫–ª
      }, 3000); // 3 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –ø–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    }, flyDuration);
  }, 10000);
}

// API –º–∞—Ä—à—Ä—É—Ç—ã
app.get('/api/user/:telegramId', async (req, res) => {
  res.json({ balance: 1000, username: 'TestUser' });
});

// API –¥–ª—è –∫–µ–π—Å–æ–≤
app.get('/api/cases', async (req, res) => {
  const cases = [
    {
      id: 1,
      name: '–°—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–µ–π—Å',
      price: 50,
      image: 'üéÅ',
      rarity: 'common',
      description: '–ë–∞–∑–æ–≤—ã–π –∫–µ–π—Å –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤'
    },
    {
      id: 2,
      name: '–ó–≤–µ–∑–¥–Ω—ã–π –∫–µ–π—Å',
      price: 150,
      image: '‚≠ê',
      rarity: 'rare',
      description: '–ë–æ–ª—å—à–µ —à–∞–Ω—Å–æ–≤ –Ω–∞ —Ä–µ–¥–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã'
    },
    {
      id: 3,
      name: '–ü—Ä–µ–º–∏—É–º –∫–µ–π—Å',
      price: 300,
      image: 'üíé',
      rarity: 'epic',
      description: '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã'
    },
    {
      id: 4,
      name: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –∫–µ–π—Å',
      price: 500,
      image: 'üëë',
      rarity: 'legendary',
      description: '–°–∞–º—ã–µ —Ä–µ–¥–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã'
    }
  ];
  res.json(cases);
});

// –ü–æ–¥–∞—Ä–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–ø–∞—Å—Ç—å
const prizes = {
  common: [
    { name: '10 –∑–≤–µ–∑–¥', value: 10, emoji: '‚≠ê', rarity: 'common', chance: 40 },
    { name: '25 –∑–≤–µ–∑–¥', value: 25, emoji: '‚≠ê', rarity: 'common', chance: 30 },
    { name: '–°—Ç–∏–∫–µ—Ä Smile', value: 0, emoji: 'üòä', rarity: 'common', chance: 20 },
    { name: '–°—Ç–∏–∫–µ—Ä Wink', value: 0, emoji: 'üòâ', rarity: 'common', chance: 10 }
  ],
  rare: [
    { name: '50 –∑–≤–µ–∑–¥', value: 50, emoji: '‚≠ê', rarity: 'rare', chance: 35 },
    { name: '100 –∑–≤–µ–∑–¥', value: 100, emoji: '‚≠ê', rarity: 'rare', chance: 25 },
    { name: '–ü—Ä–µ–º–∏—É–º —Å—Ç–∏–∫–µ—Ä', value: 0, emoji: 'üé®', rarity: 'rare', chance: 20 },
    { name: '–ë–æ–Ω—É—Å x2', value: 0, emoji: 'üé≤', rarity: 'rare', chance: 15 },
    { name: '–†–µ–¥–∫–∏–π —ç–º–æ–¥–∑–∏', value: 0, emoji: 'ü¶Ñ', rarity: 'rare', chance: 5 }
  ],
  epic: [
    { name: '200 –∑–≤–µ–∑–¥', value: 200, emoji: '‚≠ê', rarity: 'epic', chance: 30 },
    { name: '350 –∑–≤–µ–∑–¥', value: 350, emoji: '‚≠ê', rarity: 'epic', chance: 20 },
    { name: 'VIP —Å—Ç–∞—Ç—É—Å', value: 0, emoji: 'üëë', rarity: 'epic', chance: 25 },
    { name: '–≠–ø–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–∫–µ—Ä', value: 0, emoji: '‚ú®', rarity: 'epic', chance: 15 },
    { name: '–ú–µ–≥–∞ –±–æ–Ω—É—Å', value: 0, emoji: 'üéä', rarity: 'epic', chance: 10 }
  ],
  legendary: [
    { name: '500 –∑–≤–µ–∑–¥', value: 500, emoji: '‚≠ê', rarity: 'legendary', chance: 25 },
    { name: '1000 –∑–≤–µ–∑–¥', value: 1000, emoji: '‚≠ê', rarity: 'legendary', chance: 15 },
    { name: 'Telegram Premium', value: 0, emoji: '‚ö°', rarity: 'legendary', chance: 30 },
    { name: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π —Å—Ç–∏–∫–µ—Ä', value: 0, emoji: 'üî•', rarity: 'legendary', chance: 20 },
    { name: '–î–∂–µ–∫–ø–æ—Ç!', value: 2000, emoji: 'üí∞', rarity: 'legendary', chance: 10 }
  ]
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–∏–∑–∞
function getRandomPrize(caseRarity) {
  const availablePrizes = prizes[caseRarity] || prizes.common;
  const totalChance = availablePrizes.reduce((sum, prize) => sum + prize.chance, 0);
  let random = Math.random() * totalChance;
  
  for (const prize of availablePrizes) {
    random -= prize.chance;
    if (random <= 0) {
      return prize;
    }
  }
  
  return availablePrizes[0]; // fallback
}

// API –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞
app.post('/api/case/open/:caseId', async (req, res) => {
  try {
    const { caseId } = req.params;
    const { telegramId } = req.body;
    
    // –ù–∞–π—Ç–∏ –∫–µ–π—Å
    const cases = [
      { id: 1, name: '–°—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–µ–π—Å', price: 50, rarity: 'common' },
      { id: 2, name: '–ó–≤–µ–∑–¥–Ω—ã–π –∫–µ–π—Å', price: 150, rarity: 'rare' },
      { id: 3, name: '–ü—Ä–µ–º–∏—É–º –∫–µ–π—Å', price: 300, rarity: 'epic' },
      { id: 4, name: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –∫–µ–π—Å', price: 500, rarity: 'legendary' }
    ];
    
    const selectedCase = cases.find(c => c.id == caseId);
    if (!selectedCase) {
      return res.status(404).json({ error: '–ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–∏–∑
    const prize = getRandomPrize(selectedCase.rarity);
    
    // –°–æ–∑–¥–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é (—Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤ –¥–ª—è –±–∞—Ä–∞–±–∞–Ω–∞)
    const animationItems = [];
    const allPrizes = Object.values(prizes).flat();
    
    // –î–æ–±–∞–≤–∏—Ç—å 20 —Å–ª—É—á–∞–π–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    for (let i = 0; i < 20; i++) {
      const randomPrize = allPrizes[Math.floor(Math.random() * allPrizes.length)];
      animationItems.push({
        name: randomPrize.name,
        emoji: randomPrize.emoji,
        rarity: randomPrize.rarity
      });
    }
    
    // –î–æ–±–∞–≤–∏—Ç—å –≤—ã–∏–≥—Ä—ã—à–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –≤ –∫–æ–Ω–µ—Ü
    animationItems.push({
      name: prize.name,
      emoji: prize.emoji,
      rarity: prize.rarity
    });
    
    res.json({
      success: true,
      case: selectedCase,
      prize,
      animation: animationItems,
      message: `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏: ${prize.emoji} ${prize.name}!`
    });
  } catch (error) {
    console.error('Case opening error:', error);
    res.status(500).json({ error: error.message });
  }
});

app.get('/api/rocket/status', async (req, res) => {
  try {
    if (gameState.phase === 'waiting') {
      const timeLeft = Math.max(0, Math.ceil((gameState.startTime - Date.now()) / 1000));
      res.json({
        phase: 'waiting',
        timeLeft,
        multiplier: 1.0,
        playersCount: Math.floor(Math.random() * 15) + 5,
        isRunning: false
      });
    } else if (gameState.phase === 'flying') {
      const elapsed = Date.now() - gameState.startTime;
      const currentMultiplier = 1 + elapsed * 0.0001; // –†–æ—Å—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—è
      
      res.json({
        phase: 'flying',
        multiplier: Math.min(currentMultiplier, gameState.crashPoint),
        playersCount: Math.floor(Math.random() * 15) + 5,
        timeLeft: 0,
        isRunning: true
      });
    } else { // crashed
      res.json({
        phase: 'crashed',
        multiplier: gameState.crashPoint,
        playersCount: Math.floor(Math.random() * 15) + 5,
        timeLeft: 3,
        isRunning: false
      });
    }
  } catch (error) {
    console.error('Rocket API Error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã' });
  }
});

// API –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞
app.post('/api/open-case', async (req, res) => {
  try {
    const { userId, caseId } = req.body;
    
    if (!userId || !caseId) {
      return res.status(400).json({ 
        success: false, 
        error: '–¢—Ä–µ–±—É–µ—Ç—Å—è userId –∏ caseId' 
      });
    }

    // –ù–∞—Ö–æ–¥–∏–º –∫–µ–π—Å
    const casesData = [
      { id: "1", name: "–°—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–µ–π—Å", price: 50, emoji: "üéÅ", rarity: "common" },
      { id: "2", name: "–ó–≤–µ–∑–¥–Ω—ã–π –∫–µ–π—Å", price: 150, emoji: "‚≠ê", rarity: "rare" },
      { id: "3", name: "–ü—Ä–µ–º–∏—É–º –∫–µ–π—Å", price: 300, emoji: "üíé", rarity: "epic" },
      { id: "4", name: "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –∫–µ–π—Å", price: 500, emoji: "üëë", rarity: "legendary" }
    ];

    const selectedCase = casesData.find(c => c.id === caseId);
    if (!selectedCase) {
      return res.status(404).json({
        success: false,
        error: '–ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å (–ø–æ–∫–∞ —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π)
    const userBalance = 1000;
    if (userBalance < selectedCase.price) {
      return res.status(400).json({
        success: false,
        error: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥! –ù—É–∂–Ω–æ ${selectedCase.price}, —É –≤–∞—Å ${userBalance}`
      });
    }

    console.log(`üí∞ –°–ø–∏—Å–∞–Ω–æ ${selectedCase.price} –∑–≤–µ–∑–¥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–∏–∑
    const allPrizes = [
      // –û–±—â–∏–µ –ø—Ä–∏–∑—ã (40% —à–∞–Ω—Å)
      { name: "50 –∑–≤–µ–∑–¥", emoji: "‚≠ê", rarity: "common", description: "–ù–µ–ø–ª–æ—Ö–∞—è –¥–æ–±–∞–≤–∫–∞ –∫ –±–∞–ª–∞–Ω—Å—É", weight: 20 },
      { name: "100 –∑–≤–µ–∑–¥", emoji: "‚≠ê", rarity: "common", description: "–•–æ—Ä–æ—à–∏–π –±–æ–Ω—É—Å –∑–≤–µ–∑–¥", weight: 15 },
      { name: "–°—Ç–∏–∫–µ—Ä-–ø–∞–∫", emoji: "üé®", rarity: "common", description: "–ö–ª–∞—Å—Å–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã", weight: 5 },
      
      // –†–µ–¥–∫–∏–µ –ø—Ä–∏–∑—ã (35% —à–∞–Ω—Å) 
      { name: "300 –∑–≤–µ–∑–¥", emoji: "üí´", rarity: "rare", description: "–û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–∏–∑!", weight: 15 },
      { name: "500 –∑–≤–µ–∑–¥", emoji: "üí´", rarity: "rare", description: "–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω—ã–π –±–æ–Ω—É—Å", weight: 10 },
      { name: "–ü—Ä–µ–º–∏—É–º —Å—Ç–∏–∫–µ—Ä—ã", emoji: "üé≠", rarity: "rare", description: "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã", weight: 10 },
      
      // –≠–ø–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑—ã (20% —à–∞–Ω—Å)
      { name: "1000 –∑–≤–µ–∑–¥", emoji: "üåü", rarity: "epic", description: "–ü–æ—Ç—Ä—è—Å–∞—é—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞!", weight: 10 },
      { name: "7 –¥–Ω–µ–π VIP", emoji: "üëë", rarity: "epic", description: "–ù–µ–¥–µ–ª—è –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞", weight: 5 },
      { name: "–†–µ–¥–∫–∏–π –ø—Ä–µ–¥–º–µ—Ç", emoji: "üíé", rarity: "epic", description: "–û—á–µ–Ω—å —Ü–µ–Ω–Ω–∞—è –Ω–∞—Ö–æ–¥–∫–∞", weight: 5 },
      
      // –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ –ø—Ä–∏–∑—ã (5% —à–∞–Ω—Å)
      { name: "–î–ñ–ï–ö–ü–û–¢ 5000!", emoji: "üé∞", rarity: "legendary", description: "–ù–ï–í–ï–†–û–Ø–¢–ù–û! –ì–ª–∞–≤–Ω—ã–π –ø—Ä–∏–∑!", weight: 3 },
      { name: "30 –¥–Ω–µ–π VIP", emoji: "üèÜ", rarity: "legendary", description: "–ú–µ—Å—è—Ü –ø—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å–∞!", weight: 2 }
    ];

    // –í–∑–≤–µ—à–µ–Ω–Ω—ã–π —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä
    const totalWeight = allPrizes.reduce((sum, prize) => sum + prize.weight, 0);
    let random = Math.random() * totalWeight;
    
    let selectedPrize = allPrizes[0];
    for (const prize of allPrizes) {
      random -= prize.weight;
      if (random <= 0) {
        selectedPrize = prize;
        break;
      }
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–∏–∑–æ–≤ –¥–ª—è —Ä—É–ª–µ—Ç–∫–∏
    const extendedPrizes = [];
    for (let i = 0; i < 100; i++) { // 100 –ø—Ä–∏–∑–æ–≤ –¥–ª—è –¥–ª–∏–Ω–Ω–æ–π —Ä—É–ª–µ—Ç–∫–∏
      const randomPrize = allPrizes[Math.floor(Math.random() * allPrizes.length)];
      extendedPrizes.push(randomPrize);
    }

    res.json({
      success: true,
      result: selectedPrize,
      allPossiblePrizes: extendedPrizes,
      newBalance: userBalance - selectedCase.price
    });

  } catch (error) {
    console.error('Open case error:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–µ–π—Å–∞'
    });
  }
});

// Web App –º–∞—Ä—à—Ä—É—Ç
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, '../web/index.html'));
});

// Webhook –¥–ª—è –±–æ—Ç–∞ (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è)
app.use(bot.webhookCallback('/webhook'));

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`üöÄ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É —Å—Ä–∞–∑—É
  console.log('üéÆ –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª...');
  startGame();
});

// –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—É—Å–∫ —Å polling (–±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏–≥—Ä—ã)
console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å polling...');
setTimeout(() => {
  bot.launch().then(() => {
    console.log('‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ polling —Ä–µ–∂–∏–º–µ!');
  }).catch((error) => {
    console.log('‚ùå Polling –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
  });
}, 1000);

export { bot, app };
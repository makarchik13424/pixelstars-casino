import sqlite3 from 'sqlite3';
import { promisify } from 'util';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

class Database {
  constructor() {
    const dbPath = path.join(__dirname, '../../database/casino.db');
    this.db = new sqlite3.Database(dbPath);
    
    // –ü—Ä–æ–º–∏—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    this.run = promisify(this.db.run.bind(this.db));
    this.get = promisify(this.db.get.bind(this.db));
    this.all = promisify(this.db.all.bind(this.db));
    
    this.initTables();
  }

  async initTables() {
    try {
      // –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      await this.run(`
        CREATE TABLE IF NOT EXISTS users (
          id INTEGER PRIMARY KEY,
          telegram_id TEXT UNIQUE NOT NULL,
          username TEXT,
          first_name TEXT,
          last_name TEXT,
          stars_balance INTEGER DEFAULT 1000,
          total_spent INTEGER DEFAULT 0,
          total_won INTEGER DEFAULT 0,
          level INTEGER DEFAULT 1,
          experience INTEGER DEFAULT 0,
          created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
          last_active DATETIME DEFAULT CURRENT_TIMESTAMP
        )
      `);

      // –¢–∞–±–ª–∏—Ü–∞ –∫–µ–π—Å–æ–≤
      await this.run(`
        CREATE TABLE IF NOT EXISTS cases (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          name TEXT NOT NULL,
          description TEXT,
          price INTEGER NOT NULL,
          rarity TEXT DEFAULT 'common',
          image_url TEXT,
          active BOOLEAN DEFAULT 1,
          created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
      `);

      // –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–≥—Ä–∞–¥ –≤ –∫–µ–π—Å–∞—Ö
      await this.run(`
        CREATE TABLE IF NOT EXISTS case_rewards (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          case_id INTEGER,
          reward_type TEXT NOT NULL,
          reward_value TEXT NOT NULL,
          reward_name TEXT NOT NULL,
          rarity TEXT DEFAULT 'common',
          probability REAL NOT NULL,
          stars_value INTEGER DEFAULT 0,
          FOREIGN KEY (case_id) REFERENCES cases (id)
        )
      `);

      // –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–æ–≤
      await this.run(`
        CREATE TABLE IF NOT EXISTS case_openings (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          user_id INTEGER,
          case_id INTEGER,
          reward_id INTEGER,
          stars_spent INTEGER,
          opened_at DATETIME DEFAULT CURRENT_TIMESTAMP,
          FOREIGN KEY (user_id) REFERENCES users (id),
          FOREIGN KEY (case_id) REFERENCES cases (id),
          FOREIGN KEY (reward_id) REFERENCES case_rewards (id)
        )
      `);

      // –¢–∞–±–ª–∏—Ü–∞ –∏–≥—Ä
      await this.run(`
        CREATE TABLE IF NOT EXISTS games (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          user_id INTEGER,
          game_type TEXT NOT NULL,
          bet_amount INTEGER NOT NULL,
          result TEXT,
          payout INTEGER DEFAULT 0,
          multiplier REAL DEFAULT 0,
          game_data TEXT,
          played_at DATETIME DEFAULT CURRENT_TIMESTAMP,
          FOREIGN KEY (user_id) REFERENCES users (id)
        )
      `);

      // –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      await this.run(`
        CREATE TABLE IF NOT EXISTS transactions (
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          user_id INTEGER,
          type TEXT NOT NULL,
          amount INTEGER NOT NULL,
          description TEXT,
          reference_id INTEGER,
          created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
          FOREIGN KEY (user_id) REFERENCES users (id)
        )
      `);

      console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
      await this.seedDefaultData();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    }
  }

  async seedDefaultData() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–µ–π—Å—ã
    const existingCases = await this.get('SELECT COUNT(*) as count FROM cases');
    
    if (existingCases.count === 0) {
      // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∫–µ–π—Å—ã
      const cases = [
        {
          name: '‚≠ê –ó–≤–µ–∑–¥–Ω—ã–π –∫–µ–π—Å',
          description: '–ë–∞–∑–æ–≤—ã–π –∫–µ–π—Å —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –Ω–∞–≥—Ä–∞–¥–∞–º–∏',
          price: 100,
          rarity: 'common'
        },
        {
          name: 'üíé –ê–ª–º–∞–∑–Ω—ã–π –∫–µ–π—Å', 
          description: '–†–µ–¥–∫–∏–π –∫–µ–π—Å —Å —Ü–µ–Ω–Ω—ã–º–∏ –Ω–∞–≥—Ä–∞–¥–∞–º–∏',
          price: 500,
          rarity: 'rare'
        },
        {
          name: 'üëë –ö–æ—Ä–æ–ª–µ–≤—Å–∫–∏–π –∫–µ–π—Å',
          description: '–≠–ø–∏—á–µ—Å–∫–∏–π –∫–µ–π—Å —Å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º–∏ –Ω–∞–≥—Ä–∞–¥–∞–º–∏',
          price: 1000,
          rarity: 'epic'
        }
      ];

      for (const caseData of cases) {
        const result = await this.run(
          'INSERT INTO cases (name, description, price, rarity) VALUES (?, ?, ?, ?)',
          [caseData.name, caseData.description, caseData.price, caseData.rarity]
        );

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–µ–π—Å–∞
        await this.addCaseRewards(result.lastID, caseData.rarity);
      }

      console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –±–∞–∑–æ–≤—ã–µ –∫–µ–π—Å—ã');
    }
  }

  async addCaseRewards(caseId, rarity) {
    const rewards = {
      common: [
        { type: 'stars', value: '50', name: '50 –∑–≤–µ–∑–¥', rarity: 'common', probability: 0.4, stars_value: 50 },
        { type: 'stars', value: '100', name: '100 –∑–≤–µ–∑–¥', rarity: 'common', probability: 0.3, stars_value: 100 },
        { type: 'sticker', value: 'premium_sticker_1', name: '–ü—Ä–µ–º–∏—É–º —Å—Ç–∏–∫–µ—Ä', rarity: 'uncommon', probability: 0.2, stars_value: 150 },
        { type: 'stars', value: '200', name: '200 –∑–≤–µ–∑–¥', rarity: 'rare', probability: 0.1, stars_value: 200 }
      ],
      rare: [
        { type: 'stars', value: '200', name: '200 –∑–≤–µ–∑–¥', rarity: 'common', probability: 0.3, stars_value: 200 },
        { type: 'stars', value: '500', name: '500 –∑–≤–µ–∑–¥', rarity: 'uncommon', probability: 0.25, stars_value: 500 },
        { type: 'premium', value: '7', name: '7 –¥–Ω–µ–π –ø—Ä–µ–º–∏—É–º–∞', rarity: 'rare', probability: 0.25, stars_value: 700 },
        { type: 'stars', value: '1000', name: '1000 –∑–≤–µ–∑–¥', rarity: 'epic', probability: 0.15, stars_value: 1000 },
        { type: 'jackpot', value: '2000', name: '–î–ñ–ï–ö–ü–û–¢! 2000 –∑–≤–µ–∑–¥', rarity: 'legendary', probability: 0.05, stars_value: 2000 }
      ],
      epic: [
        { type: 'stars', value: '500', name: '500 –∑–≤–µ–∑–¥', rarity: 'common', probability: 0.25, stars_value: 500 },
        { type: 'premium', value: '30', name: '30 –¥–Ω–µ–π –ø—Ä–µ–º–∏—É–º–∞', rarity: 'uncommon', probability: 0.25, stars_value: 1500 },
        { type: 'stars', value: '2000', name: '2000 –∑–≤–µ–∑–¥', rarity: 'rare', probability: 0.2, stars_value: 2000 },
        { type: 'exclusive', value: 'vip_access', name: 'VIP –¥–æ—Å—Ç—É–ø', rarity: 'epic', probability: 0.15, stars_value: 3000 },
        { type: 'mega_jackpot', value: '5000', name: '–ú–ï–ì–ê –î–ñ–ï–ö–ü–û–¢! 5000 –∑–≤–µ–∑–¥', rarity: 'legendary', probability: 0.1, stars_value: 5000 },
        { type: 'ultimate', value: '10000', name: '–£–õ–¨–¢–†–ê –ü–†–ò–ó! 10000 –∑–≤–µ–∑–¥', rarity: 'mythic', probability: 0.05, stars_value: 10000 }
      ]
    };

    const caseRewards = rewards[rarity] || rewards.common;
    
    for (const reward of caseRewards) {
      await this.run(
        'INSERT INTO case_rewards (case_id, reward_type, reward_value, reward_name, rarity, probability, stars_value) VALUES (?, ?, ?, ?, ?, ?, ?)',
        [caseId, reward.type, reward.value, reward.name, reward.rarity, reward.probability, reward.stars_value]
      );
    }
  }

  close() {
    this.db.close();
  }
}

export default new Database();
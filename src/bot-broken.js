import { Telegraf, Markup } from 'telegraf';
import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import path from 'path';
import { fileURLToPath } fr// –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É
console.log('üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API...');

bot.telegram.getMe().then((botInfo) => {
  console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API —É—Å–ø–µ—à–Ω–æ!');
  console.log('ü§ñ –ò–º—è –±–æ—Ç–∞:', botInfo.first_name);
  console.log('üìù Username:', botInfo.username);
  
  // –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
  console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...');
  return bot.launch();
}).then(() => {
  console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
  console.log('‚úÖ –ì–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è');
  console.log('üì± WebApp URL:', `http://localhost:${PORT}`);
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π –∏–≥—Ä—ã –∑–≤–µ–∑–¥–∞...');
  startRocketGame();
}).catch((error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  console.error('üîç –ö–æ–¥ –æ—à–∏–±–∫–∏:', error.code);
});atabase from './config/database.js';
import { setupCommands } from './handlers/commands.js';
import { setupCaseHandlers } from './handlers/cases.js';
import { setupGameHandlers } from './handlers/games.js';
import { StarService } from './services/stars.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

dotenv.config();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
// –ü—Ä–æ–≤–µ—Ä–∫–∞ BOT_TOKEN
if (!process.env.BOT_TOKEN) {
  console.error('‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ');
  process.exit(1);
}

console.log('üîë BOT_TOKEN –Ω–∞–π–¥–µ–Ω:', process.env.BOT_TOKEN ? '–î–∞' : '–ù–µ—Ç');

const bot = new Telegraf(process.env.BOT_TOKEN);
const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, '../dist')));

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
const starService = new StarService();

// Middleware –¥–ª—è –±–æ—Ç–∞ - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
bot.use(async (ctx, next) => {
  console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', ctx.update);
  
  if (ctx.from) {
    const user = await database.get(
      'SELECT * FROM users WHERE telegram_id = ?',
      [ctx.from.id.toString()]
    );

    if (!user) {
      await database.run(
        'INSERT INTO users (telegram_id, username, first_name, last_name) VALUES (?, ?, ?, ?)',
        [
          ctx.from.id.toString(),
          ctx.from.username || null,
          ctx.from.first_name || null,
          ctx.from.last_name || null
        ]
      );
      console.log(`üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${ctx.from.first_name} (@${ctx.from.username})`);
    } else {
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      await database.run(
        'UPDATE users SET last_active = CURRENT_TIMESTAMP WHERE telegram_id = ?',
        [ctx.from.id.toString()]
      );
    }

    ctx.user = user || await database.get(
      'SELECT * FROM users WHERE telegram_id = ?',
      [ctx.from.id.toString()]
    );
  }
  
  return next();
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
setupCommands(bot, starService);
setupCaseHandlers(bot, starService);
setupGameHandlers(bot, starService);

// API —Ä–æ—É—Ç—ã
app.get('/api/user/:telegramId', async (req, res) => {
  try {
    const user = await database.get(
      'SELECT * FROM users WHERE telegram_id = ?',
      [req.params.telegramId]
    );
    
    if (!user) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    res.json(user);
  } catch (error) {
    console.error('API Error:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.get('/api/cases', async (req, res) => {
  try {
    const cases = await database.all(
      'SELECT * FROM cases WHERE active = 1 ORDER BY price ASC'
    );
    res.json(cases);
  } catch (error) {
    console.error('API Error:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// API –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∫–µ—Ç–∫–∏
app.get('/api/rocket/status', async (req, res) => {
  try {
    // –ü—Ä–æ—Å—Ç–∞—è –∏–º–∏—Ç–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞
    const now = Date.now();
    const cycle = (now % 20000) / 1000; // 20-—Å–µ–∫—É–Ω–¥–Ω—ã–π —Ü–∏–∫–ª
    
    let gameData;
    
    if (cycle < 10) {
      // –§–∞–∑–∞ —Å—Ç–∞–≤–æ–∫
      const timeLeft = Math.ceil(10 - cycle);
      gameData = {
        phase: 'waiting',
        multiplier: 1.00,
        playersCount: Math.floor(Math.random() * 15) + 5, // 5-20 –∏–≥—Ä–æ–∫–æ–≤
        timeLeft: timeLeft,
        isRunning: true
      };
    } else if (cycle < 18) {
      // –§–∞–∑–∞ –ø–æ–ª–µ—Ç–∞
      const flightTime = cycle - 10;
      const multiplier = 1 + flightTime * 0.15;
      gameData = {
        phase: 'flying',
        multiplier: multiplier,
        playersCount: Math.floor(Math.random() * 15) + 5, // 5-20 –∏–≥—Ä–æ–∫–æ–≤
        timeLeft: 0,
        isRunning: true
      };
    } else {
      // –§–∞–∑–∞ –≤–∑—Ä—ã–≤–∞
      gameData = {
        phase: 'crashed',
        multiplier: 1 + (18 - 10) * 0.15,
        playersCount: Math.floor(Math.random() * 15) + 5, // 5-20 –∏–≥—Ä–æ–∫–æ–≤
        timeLeft: 0,
        isRunning: true
      };
    }
    
    res.json(gameData);
  } catch (error) {
    console.error('Rocket API Error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã' });
  }
});app.post('/api/case/open/:caseId', async (req, res) => {
  try {
    const { telegramId } = req.body;
    const { caseId } = req.params;
    
    const result = await starService.openCase(telegramId, caseId);
    res.json(result);
  } catch (error) {
    console.error('API Error:', error);
    res.status(500).json({ error: error.message });
  }
});

// Web App –º–∞—Ä—à—Ä—É—Ç
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, '../dist/index.html'));
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`üöÄ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É
console.log('üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API...');

bot.telegram.getMe().then((botInfo) => {
  console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API —É—Å–ø–µ—à–Ω–æ!');
  console.log('ü§ñ –ò–º—è –±–æ—Ç–∞:', botInfo.first_name);
  console.log('ÔøΩ Username:', botInfo.username);
  
  // –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
  console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...');
  return bot.launch();
}).then(() => {
  console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
  console.log('‚úÖ –ì–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è');
  console.log('üì± WebApp URL:', `http://localhost:${PORT}`);
}).catch((error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  console.error('üîç –ö–æ–¥ –æ—à–∏–±–∫–∏:', error.code);
});

// Graceful shutdown
process.once('SIGINT', () => {
  console.log('üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  bot.stop('SIGINT');
  database.close();
  process.exit(0);
});

process.once('SIGTERM', () => {
  console.log('üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  bot.stop('SIGTERM');
  database.close();
  process.exit(0);
});

export { bot, app };
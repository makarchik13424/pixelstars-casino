// Cases functionality
console.log('üöÄ CASES.JS –ó–ê–ì–†–£–ñ–ï–ù –í', new Date().toLocaleTimeString());

class CasesManager {
    constructor() {
        console.log('üéÅ CasesManager: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞—Ç–∞');
        this.cases = []; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
        this.loadCases();
        this.updateInventoryDisplay(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        this.setupEventListeners();
        console.log('üéÅ CasesManager: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }

    setupEventListeners() {
        console.log('üéÅ CasesManager: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π');
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–µ–≤—å—é
        const previewModal = document.getElementById('case-preview-modal');
        const closePreviewBtn = document.getElementById('close-preview-modal');
        const cancelBtn = document.getElementById('cancel-case-preview');
        const openFromPreviewBtn = document.getElementById('open-case-from-preview');

        console.log('üéÅ –≠–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥–∞–ª–∞:', {
            previewModal: !!previewModal,
            closePreviewBtn: !!closePreviewBtn,
            cancelBtn: !!cancelBtn,
            openFromPreviewBtn: !!openFromPreviewBtn
        });

        if (closePreviewBtn) {
            closePreviewBtn.addEventListener('click', () => this.closePreviewModal());
        } else {
            console.warn('üéÅ –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–µ–≤—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
        }

        if (cancelBtn) {
            cancelBtn.addEventListener('click', () => this.closePreviewModal());
        } else {
            console.warn('üéÅ –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
        }

        if (openFromPreviewBtn) {
            openFromPreviewBtn.addEventListener('click', () => this.openCaseFromPreview());
            console.log('üéÅ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∫–Ω–æ–ø–∫–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞');
        } else {
            console.error('üéÅ –ö–ù–û–ü–ö–ê –û–¢–ö–†–´–¢–ò–Ø –ö–ï–ô–°–ê –ù–ï –ù–ê–ô–î–ï–ù–ê!');
        }

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ —Ñ–æ–Ω
        if (previewModal) {
            previewModal.addEventListener('click', (e) => {
                if (e.target === previewModal) {
                    this.closePreviewModal();
                }
            });
        }

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ ESC
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                if (previewModal && previewModal.style.display === 'flex') {
                    this.closePreviewModal();
                }
            }
        });
    }

    async initializeCases() {
        try {
            // Load available cases
            await this.loadCases();
        } catch (error) {
            console.error('Failed to initialize cases:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–µ–π—Å–æ–≤');
        }
    }

    async loadCases() {
        try {
            const response = await fetch('/api/cases');
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            
            // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∫–µ–π—Å–æ–≤ –Ω–∞–ø—Ä—è–º—É—é
            if (Array.isArray(data)) {
                this.cases = data; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–µ–π—Å—ã
                this.renderCases(data);
            } else if (data.success) {
                this.cases = data.cases; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–µ–π—Å—ã
                this.renderCases(data.cases);
            } else {
                throw new Error(data.error || 'Failed to load cases');
            }
        } catch (error) {
            console.error('Error loading cases:', error);
            this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–µ–π—Å—ã');
        }
    }

    renderCases(cases) {
        console.log('üéÅ Rendering cases:', cases); // Debug
        const casesGrid = document.getElementById('cases-grid');
        if (!casesGrid) {
            console.error('‚ùå Cases grid –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return;
        }

        if (!cases || cases.length === 0) {
            console.warn('‚ö†Ô∏è –ù–µ—Ç –∫–µ–π—Å–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
            casesGrid.innerHTML = '<p>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–µ–π—Å–æ–≤...</p>';
            return;
        }

        console.log('üéÅ –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è', cases.length, '–∫–µ–π—Å–æ–≤');

        casesGrid.innerHTML = cases.map(caseData => `
            <div class="case-card ${caseData.rarity}" data-case-id="${caseData.id}">
                <div class="case-image">${caseData.image || caseData.emoji}</div>
                <div class="case-name">${caseData.name}</div>
                <div class="case-price">${caseData.price} ‚≠ê</div>
                <div class="case-description">${caseData.description}</div>
                <div class="case-open-btn" data-case-id="${caseData.id}">üéÅ –û–¢–ö–†–´–¢–¨</div>
            </div>
        `).join('');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –∫–µ–π—Å–æ–≤ (–ø—Ä–æ—Å–º–æ—Ç—Ä)
        const caseCards = casesGrid.querySelectorAll('.case-card');
        caseCards.forEach(card => {
            card.addEventListener('click', (e) => {
                // –ï—Å–ª–∏ –∫–ª–∏–∫ –Ω–µ –ø–æ –∫–Ω–æ–ø–∫–µ –æ—Ç–∫—Ä—ã—Ç–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                if (!e.target.classList.contains('case-open-btn')) {
                    const caseId = card.getAttribute('data-case-id');
                    console.log('üëÅÔ∏è –ö–ª–∏–∫ –ø–æ –∫–µ–π—Å—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:', caseId);
                    this.showCaseModal(caseId);
                }
            });
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è
        const openButtons = casesGrid.querySelectorAll('.case-open-btn');
        openButtons.forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.stopPropagation();
                const caseId = btn.getAttribute('data-case-id');
                console.log('üéÅ –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞:', caseId);
                this.directOpenCase(caseId);
            });
        });
        
        console.log('üéÅ –î–æ–±–∞–≤–ª–µ–Ω—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è', caseCards.length, '–∫–µ–π—Å–æ–≤ –∏', openButtons.length, '–∫–Ω–æ–ø–æ–∫ –æ—Ç–∫—Ä—ã—Ç–∏—è');
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –∫–µ–π—Å–∞
    showCaseModal(caseId) {
        console.log('üëÅÔ∏è –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∫–µ–π—Å–∞:', caseId);
        
        const caseIdString = String(caseId);
        const selectedCase = this.cases.find(c => String(c.id) === caseIdString);
        
        if (!selectedCase) {
            console.error('‚ùå –ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω:', caseIdString);
            return;
        }

        console.log('üëÅÔ∏è –ù–∞–π–¥–µ–Ω–Ω—ã–π –∫–µ–π—Å:', selectedCase);
        console.log('üéÅ –ü—Ä–∏–∑—ã –≤ –∫–µ–π—Å–µ:', selectedCase.items);
        console.log('üîç –ï—Å—Ç—å –ª–∏ items?', !!selectedCase.items);
        console.log('üì¶ –î–ª–∏–Ω–∞ items:', selectedCase.items ? selectedCase.items.length : 'undefined');
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        let modal = document.getElementById('casePreviewModal');
        if (!modal) {
            modal = document.createElement('div');
            modal.id = 'casePreviewModal';
            modal.className = 'modal';
            document.body.appendChild(modal);
        }

        // –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        modal.innerHTML = `
            <div class="modal-content">
                <span class="close" onclick="document.getElementById('casePreviewModal').style.display='none'">&times;</span>
                <h2>${selectedCase.name}</h2>
                <div class="modal-case-info">
                    <div class="modal-case-image">${selectedCase.image || selectedCase.emoji}</div>
                    <div class="modal-case-details">
                        <p><strong>–¶–µ–Ω–∞:</strong> ${selectedCase.price} ‚≠ê</p>
                        <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${selectedCase.description}</p>
                        <p><strong>–†–µ–¥–∫–æ—Å—Ç—å:</strong> ${selectedCase.rarity}</p>
                    </div>
                </div>
                <h3>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏–∑—ã:</h3>
                <div class="prizes-grid" id="prizesGrid">
                    ${selectedCase.items ? selectedCase.items.map(prize => `
                        <div class="prize-item ${prize.rarity}">
                            <div class="prize-image">${prize.emoji}</div>
                            <div class="prize-name">${prize.name}</div>
                            <div class="prize-value">${prize.value} ‚≠ê</div>
                            <div class="prize-chance">${prize.dropRate}%</div>
                        </div>
                    `).join('') : '<p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–∏–∑–∞—Ö</p>'}
                </div>
                <div class="modal-actions">
                    <button class="open-case-btn" onclick="window.casesManager.openCaseFromModal('${selectedCase.id}')">
                        üéÅ –û–¢–ö–†–´–¢–¨ –ó–ê ${selectedCase.price} ‚≠ê
                    </button>
                </div>
            </div>
        `;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        modal.style.display = 'block';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        modal.onclick = function(event) {
            if (event.target === modal) {
                modal.style.display = 'none';
            }
        };
    }

    // –û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å –∏–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    openCaseFromModal(caseId) {
        console.log('üéÅ –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞ –∏–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞:', caseId);
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const modal = document.getElementById('casePreviewModal');
        if (modal) {
            modal.style.display = 'none';
        }
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–µ–π—Å
        this.directOpenCase(caseId);
    }

    // –ü—Ä—è–º–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞ –±–µ–∑ –ø—Ä–µ–≤—å—é –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
    async directOpenCase(caseId) {
        console.log('üéÅ –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞:', caseId);
        
        const caseIdString = String(caseId);
        const selectedCase = this.cases.find(c => String(c.id) === caseIdString);
        
        if (!selectedCase) {
            console.error('‚ùå –ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω:', caseIdString);
            this.showToast('–ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!', 'error');
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
        const currentBalance = window.getBalance ? window.getBalance() : (window.userStars || 0);
        
        console.log('üéÅ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è –∫–µ–π—Å–∞:', selectedCase.price);
        console.log('üéÅ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:', currentBalance);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        if (currentBalance < selectedCase.price) {
            console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥:', currentBalance, '<', selectedCase.price);
            this.showToast(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥! –ù—É–∂–Ω–æ: ${selectedCase.price}, –µ—Å—Ç—å: ${currentBalance}`, 'error');
            return;
        }

        console.log('üéÅ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞...');
        
        try {
            await this.openCase(caseIdString);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞:', error);
            this.showToast('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞: ' + error.message, 'error');
        }
    }

    async openCase(caseId) {
        try {
            console.log('Opening case:', caseId); // Debug log
            
            let user = window.Telegram?.WebApp?.initDataUnsafe?.user;
            
            // For testing outside Telegram, use fake user
            if (!user) {
                user = { id: 123456, first_name: 'TestUser' };
                console.log('Using test user for development');
            }

            // Show opening modal
            this.showOpeningModal(caseId);

            // Request case opening
            const response = await fetch('/api/open-case', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    userId: user.id,
                    caseId: caseId
                })
            });

            const data = await response.json();

            if (data.success) {
                // Immediately update balance before animation
                if (data.newBalance !== undefined) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
                    window.userStars = data.newBalance;
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    const balanceElement = document.getElementById('balanceAmount');
                    if (balanceElement) {
                        balanceElement.textContent = data.newBalance;
                        console.log(`üí∞ –ë–∞–ª–∞–Ω—Å —Å—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª–µ–Ω: ${data.newBalance} –∑–≤–µ–∑–¥`);
                    }
                    
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –µ—Å–ª–∏ –Ω–µ –≤ –¥–µ–º–æ —Ä–µ–∂–∏–º–µ
                    if (!window.isDemoMode) {
                        localStorage.setItem('realBalance', data.newBalance.toString());
                        console.log('üí∞ –ë–∞–ª–∞–Ω—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ localStorage –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞:', data.newBalance);
                    }
                }
                
                // Start roulette animation
                this.startRouletteAnimation(data.result, data.allPossiblePrizes, data.newBalance);
            } else {
                this.closeModal();
                this.showError(data.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–µ–π—Å–∞');
            }

        } catch (error) {
            console.error('Error opening case:', error);
            this.closeModal();
            this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å');
        }
    }

    showOpeningModal(caseId) {
        const modal = document.getElementById('case-modal');
        const openingSection = document.getElementById('case-opening');
        const resultSection = document.getElementById('case-result');
        
        // Reset modal state
        openingSection.style.display = 'block';
        resultSection.style.display = 'none';
        resultSection.classList.remove('show');
        
        modal.style.display = 'flex';
        
        // Prevent body scroll
        document.body.style.overflow = 'hidden';
    }

    startRouletteAnimation(winningPrize, allPrizes, newBalance) {
        console.log('üé∞ –ó–∞–ø—É—Å–∫ —Ä—É–ª–µ—Ç–∫–∏ —á–µ—Ä–µ–∑ startRouletteAnimation');
        
        // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ø—Ä–æ—Å—Ç—É—é —Ä—É–ª–µ—Ç–∫—É
        this.startSimpleRouletteAnimation(winningPrize, allPrizes, newBalance);
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        const modal = document.getElementById('case-modal');
        if (modal) {
            modal.style.display = 'none';
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫—Ä–æ–ª–ª
        document.body.style.overflow = 'auto';
    }

    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    startSimpleRouletteAnimation(winningPrize, allPrizes, newBalance) {
        console.log('üé∞ –ó–∞–ø—É—Å–∫ —Ä—É–ª–µ—Ç–∫–∏ –¥–ª—è –∫–µ–π—Å–∞');
        console.log('üèÜ –í—ã–∏–≥—Ä—ã—à–Ω—ã–π –ø—Ä–∏–∑:', winningPrize);
        
        // –°–æ–∑–¥–∞–µ–º —Ä—É–ª–µ—Ç–∫—É –ø—Ä—è–º–æ –ø–æ–≤–µ—Ä—Ö —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–∫–∞–∫ –≤ —Ç–µ—Å—Ç–µ)
        const rouletteContainer = document.createElement('div');
        rouletteContainer.id = 'dynamic-roulette';
        rouletteContainer.style.cssText = `
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 90%;
            max-width: 1000px;
            height: 200px;
            background: linear-gradient(135deg, #1a1a2e 0%, #16213e 100%);
            border: 3px solid #ffd700;
            border-radius: 15px;
            overflow: hidden;
            z-index: 9999;
            box-shadow: 0 0 50px rgba(255, 215, 0, 0.5);
        `;
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ä—É–ª–µ—Ç–∫–∏
        const rouletteItems = document.createElement('div');
        rouletteItems.style.cssText = `
            display: flex;
            align-items: center;
            height: 100%;
            gap: 10px;
            padding: 10px;
            transition: transform 4s cubic-bezier(0.25, 0.1, 0.25, 1);
        `;
        
        // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –ø—Ä–∏–∑–æ–≤ –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–µ–π—Å–∞
        const totalItems = 30;
        const winPosition = 22; // –í—ã–∏–≥—Ä—ã—à–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
        const prizesList = [];
        
        console.log('üéÅ –ü—Ä–∏–∑—ã –∏–∑ –∫–µ–π—Å–∞ –¥–ª—è —Ä—É–ª–µ—Ç–∫–∏:', allPrizes);
        
        for (let i = 0; i < totalItems; i++) {
            if (i === winPosition) {
                prizesList.push(winningPrize);
            } else if (allPrizes && allPrizes.length > 0) {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑—ã –∏–∑ –∫–µ–π—Å–∞
                const randomPrize = allPrizes[Math.floor(Math.random() * allPrizes.length)];
                prizesList.push(randomPrize);
            } else {
                // –§–µ–π–∫–æ–≤—ã–µ –ø—Ä–∏–∑—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
                prizesList.push({
                    name: '–ü—Ä–∏–∑ ' + (i + 1),
                    emoji: 'üéÅ',
                    rarity: 'common',
                    value: 100
                });
            }
        }
        
        // –°–æ–∑–¥–∞–µ–º HTML —ç–ª–µ–º–µ–Ω—Ç—ã
        prizesList.forEach((prize, index) => {
            const item = document.createElement('div');
            // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–Ω–æ–≥–æ - –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
            
            item.style.cssText = `
                min-width: 100px;
                width: 100px;
                height: 160px;
                background: linear-gradient(135deg, #2a2a4a 0%, #1a1a3a 100%);
                color: white;
                display: flex;
                flex-direction: column;
                align-items: center;
                justify-content: center;
                border-radius: 12px;
                flex-shrink: 0;
                font-size: 12px;
                font-weight: bold;
                border: 2px solid #444;
                position: relative;
                overflow: hidden;
            `;
            
            item.innerHTML = `
                <div style="font-size: 32px; margin-bottom: 8px; filter: drop-shadow(0 2px 4px rgba(0,0,0,0.3));">
                    ${prize.emoji || prize.image || 'üéÅ'}
                </div>
                <div style="text-align: center; line-height: 1.2; margin-bottom: 4px;">
                    ${(prize.name || '–ü—Ä–∏–∑').substring(0, 8)}
                </div>
                <div style="color: #ffd700; font-size: 10px;">
                    ${prize.value || '?'} ‚≠ê
                </div>
            `;
            
            rouletteItems.appendChild(item);
        });
        
        rouletteContainer.appendChild(rouletteItems);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ —Ü–µ–Ω—Ç—Ä–µ
        const pointer = document.createElement('div');
        pointer.style.cssText = `
            position: absolute;
            top: -15px;
            left: 50%;
            transform: translateX(-50%);
            width: 0;
            height: 0;
            border-left: 15px solid transparent;
            border-right: 15px solid transparent;
            border-top: 20px solid #ffd700;
            z-index: 10;
            filter: drop-shadow(0 3px 6px rgba(255, 215, 0, 0.6));
        `;
        rouletteContainer.appendChild(pointer);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
        const closeBtn = document.createElement('button');
        closeBtn.textContent = '‚úï';
        closeBtn.style.cssText = `
            position: absolute;
            top: 10px;
            right: 10px;
            background: rgba(255, 68, 68, 0.8);
            color: white;
            border: none;
            padding: 8px 12px;
            border-radius: 50%;
            cursor: pointer;
            z-index: 10;
            font-size: 16px;
            font-weight: bold;
        `;
        closeBtn.onclick = () => {
            document.body.removeChild(rouletteContainer);
            this.showResult(winningPrize, newBalance);
        };
        rouletteContainer.appendChild(closeBtn);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        document.body.appendChild(rouletteContainer);
        
        console.log('‚úÖ –†—É–ª–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å', totalItems, '—ç–ª–µ–º–µ–Ω—Ç–∞–º–∏');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        setTimeout(() => {
            const containerWidth = rouletteContainer.offsetWidth;
            const itemWidth = 110; // —à–∏—Ä–∏–Ω–∞ + gap
            const centerOffset = containerWidth / 2;
            const targetX = -(winPosition * itemWidth - centerOffset + 50);
            
            console.log('üéØ –ê–Ω–∏–º–∞—Ü–∏—è –∫ –ø–æ–∑–∏—Ü–∏–∏:', targetX);
            rouletteItems.style.transform = `translateX(${targetX}px)`;
            
            // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                const winnerItem = rouletteItems.children[winPosition];
                if (winnerItem) {
                    winnerItem.style.boxShadow = '0 0 30px #ffd700';
                    winnerItem.style.transform = 'scale(1.05)';
                    winnerItem.style.zIndex = '5';
                }
                
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏
                setTimeout(() => {
                    if (document.body.contains(rouletteContainer)) {
                        document.body.removeChild(rouletteContainer);
                        this.showResult(winningPrize, newBalance);
                    }
                }, 3000);
            }, 4000);
        }, 500);
    }

    // –î–æ–±–∞–≤–∏—Ç—å —É–∫–∞–∑–∞—Ç–µ–ª—å —Ä—É–ª–µ—Ç–∫–∏
    addRoulettePointer() {
        const rouletteContainer = document.querySelector('.roulette-container');
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —É–∫–∞–∑–∞—Ç–µ–ª—å –µ—Å–ª–∏ –µ—Å—Ç—å
        const existingPointer = rouletteContainer.querySelector('.roulette-pointer');
        if (existingPointer) existingPointer.remove();
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —É–∫–∞–∑–∞—Ç–µ–ª—å
        const pointer = document.createElement('div');
        pointer.className = 'roulette-pointer';
        pointer.innerHTML = '‚ñº';
        rouletteContainer.appendChild(pointer);
    }

    // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –≤—ã–∏–≥—Ä—ã—à–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    highlightWinningItem(winningIndex) {
        const items = document.querySelectorAll('.roulette-item');
        const winningItem = items[winningIndex];
        
        if (winningItem) {
            winningItem.classList.add('winning-item');
            
            // –≠—Ñ—Ñ–µ–∫—Ç –ø—É–ª—å—Å–∞—Ü–∏–∏
            setTimeout(() => {
                winningItem.style.transform = 'scale(1.1)';
                winningItem.style.boxShadow = '0 0 20px rgba(255, 215, 0, 0.8)';
            }, 100);
        }
    }

    // –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã (–∏–º–∏—Ç–∞—Ü–∏—è —á–µ—Ä–µ–∑ console)
    playRouletteSound() {
        console.log('üîä –ó–≤—É–∫ —Ä—É–ª–µ—Ç–∫–∏: tick-tick-tick...');
    }

    generateRouletteItems(winningPrize, allPrizes) {
        const items = [];
        const totalItems = Math.min(allPrizes.length, 100); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–∑—ã (–¥–æ 100)
        
        // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –ø—Ä–∏–∑—ã –≤ —Ä—É–ª–µ—Ç–∫—É
        for (let i = 0; i < totalItems; i++) {
            items.push(allPrizes[i % allPrizes.length]);
        }
        
        // –í—Å—Ç–∞–≤–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã–π –ø—Ä–∏–∑ –≤ –∫–æ–Ω—Ü–µ (–¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞)
        const winningIndex = totalItems - Math.floor(Math.random() * 10) - 5; // –ë–ª–∏–∂–µ –∫ –∫–æ–Ω—Ü—É
        items[winningIndex] = winningPrize;
        
        return {
            items: items,
            winningIndex: winningIndex
        };
    }

    showResult(winningPrize, newBalance) {
        // Update balance display
        if (window.balanceManager) {
            window.balanceManager.updateBalance(newBalance);
        }

        // Add to inventory
        this.addToInventory(winningPrize);

        const modal = document.getElementById('case-modal');
        const opening = document.getElementById('case-opening');
        const result = document.getElementById('case-result');
        
        // Hide opening animation, show result
        opening.style.display = 'none';
        result.style.display = 'block';
        
        // Update result display
        document.getElementById('result-emoji').textContent = winningPrize.emoji;
        document.getElementById('result-name').textContent = winningPrize.name;
        document.getElementById('result-rarity').textContent = winningPrize.rarity;
        document.getElementById('result-rarity').className = `result-rarity ${winningPrize.rarity}`;

        console.log('üéâ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∫–∞–∑–∞–Ω:', winningPrize);
    }

    closeModal() {
        const modal = document.getElementById('case-modal');
        modal.style.display = 'none';
        document.body.style.overflow = '';
        
        // Reset roulette
        const rouletteItems = document.getElementById('roulette-items');
        if (rouletteItems) {
            rouletteItems.style.transform = 'translateX(0)';
        }
    }

    bindEvents() {
        // Close modal events
        const modal = document.getElementById('case-modal');
        const closeBtn = document.getElementById('close-case-modal');
        const openAnotherBtn = document.getElementById('open-another-case');
        
        if (closeBtn) {
            closeBtn.addEventListener('click', () => this.closeModal());
        }
        
        if (openAnotherBtn) {
            openAnotherBtn.addEventListener('click', () => this.closeModal());
        }
        
        // Close on background click
        if (modal) {
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    this.closeModal();
                }
            });
        }

        // ESC key to close
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && modal.style.display === 'flex') {
                this.closeModal();
            }
        });
    }

    showError(message) {
        // You can implement a toast notification system here
        alert(message);
    }

    showToast(message, type = 'info') {
        console.log('üí¨ Toast:', message, type);
        
        // –°–æ–∑–¥–∞–µ–º toast —ç–ª–µ–º–µ–Ω—Ç
        const toast = document.createElement('div');
        toast.className = `toast toast-${type}`;
        toast.textContent = message;
        toast.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: ${type === 'error' ? '#ff4757' : '#2ed573'};
            color: white;
            padding: 12px 20px;
            border-radius: 8px;
            z-index: 10000;
            font-weight: 600;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            animation: slideIn 0.3s ease;
        `;
        
        document.body.appendChild(toast);
        
        // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            if (document.body.contains(toast)) {
                toast.style.animation = 'slideOut 0.3s ease';
                setTimeout(() => {
                    if (document.body.contains(toast)) {
                        document.body.removeChild(toast);
                    }
                }, 300);
            }
        }, 3000);
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é –∫–µ–π—Å–∞
    async showCasePreview(caseData) {
        this.currentCaseData = caseData;
        
        const modal = document.getElementById('case-preview-modal');
        const title = document.getElementById('case-preview-title');
        const icon = document.getElementById('case-preview-icon');
        const price = document.getElementById('case-preview-price');
        const description = document.getElementById('case-preview-desc');
        const prizesGrid = document.getElementById('prizes-preview-grid');

        // –ó–∞–ø–æ–ª–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–µ–π—Å–µ
        title.textContent = caseData.name;
        icon.textContent = caseData.image || caseData.emoji;
        price.innerHTML = `${caseData.price} ‚≠ê`;
        description.textContent = caseData.description;

        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –∫–µ–π—Å–∞ –∏–∑ API
        try {
            const response = await fetch('/api/cases');
            const cases = await response.json();
            const casePrizes = this.getPrizesForCase(caseData.id);
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–µ—Ç–∫—É –ø—Ä–∏–∑–æ–≤
            prizesGrid.innerHTML = casePrizes.map(prize => `
                <div class="prize-preview-item ${prize.rarity}">
                    <span class="prize-emoji">${prize.emoji}</span>
                    <div class="prize-name">${prize.name}</div>
                </div>
            `).join('');

        } catch (error) {
            console.error('Error loading case prizes:', error);
            prizesGrid.innerHTML = '<div class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–∑–æ–≤</div>';
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª
        modal.style.display = 'flex';
        document.body.style.overflow = 'hidden';
    }

    // –ó–∞–∫—Ä—ã—Ç—å –ø—Ä–µ–≤—å—é –º–æ–¥–∞–ª
    closePreviewModal() {
        const modal = document.getElementById('case-preview-modal');
        modal.style.display = 'none';
        document.body.style.overflow = '';
        this.currentCaseData = null;
    }

    // –û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å –∏–∑ –ø—Ä–µ–≤—å—é
    openCaseFromPreview() {
        console.log('openCaseFromPreview called, currentCaseData:', this.currentCaseData); // Debug
        if (this.currentCaseData) {
            console.log('Closing preview and opening case:', this.currentCaseData.id); // Debug
            this.closePreviewModal();
            this.openCase(this.currentCaseData.id);
        } else {
            console.error('No currentCaseData set!'); // Debug
            alert('–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∫–µ–π—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–µ–π—Å–∞
    getPrizesForCase(caseId) {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ Telegram –ø–æ–¥–∞—Ä–∫–∏
        const allPrizes = [
            // –û–±—â–∏–µ –ø—Ä–∏–∑—ã
            { name: "50 –∑–≤–µ–∑–¥", emoji: "‚≠ê", rarity: "common" },
            { name: "100 –∑–≤–µ–∑–¥", emoji: "‚≠ê", rarity: "common" },
            { name: "–¢—é–ª—å–ø–∞–Ω", emoji: "üå∑", rarity: "common" },
            // –†–µ–¥–∫–∏–µ –ø—Ä–∏–∑—ã
            { name: "300 –∑–≤–µ–∑–¥", emoji: "üí´", rarity: "rare" },
            { name: "–¢–æ—Ä—Ç", emoji: "üéÇ", rarity: "rare" },
            { name: "–°–≤—è–∑–∫–∞ —à–∞—Ä–æ–≤", emoji: "üéà", rarity: "rare" },
            // –≠–ø–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑—ã
            { name: "1000 –∑–≤–µ–∑–¥", emoji: "üåü", rarity: "epic" },
            { name: "–ü–ª—é—à–µ–≤—ã–π –º–∏—à–∫–∞", emoji: "üß∏", rarity: "epic" },
            { name: "–ë—É–∫–µ—Ç —Ä–æ–∑", emoji: "üåπ", rarity: "epic" },
            // –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ –ø—Ä–∏–∑—ã
            { name: "–î–ñ–ï–ö–ü–û–¢ 5000‚≠ê", emoji: "üé∞", rarity: "legendary" },
            { name: "–ò–∑—É–º—Ä—É–¥", emoji: "üíé", rarity: "legendary" }
        ];

        // –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–µ–π—Å–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞–∑–Ω—ã–µ –Ω–∞–±–æ—Ä—ã –ø—Ä–∏–∑–æ–≤
        switch(caseId) {
            case 'basic':
                return allPrizes.filter(p => ['common', 'rare'].includes(p.rarity));
            case 'premium':
                return allPrizes.filter(p => ['common', 'rare', 'epic'].includes(p.rarity));
            case 'legendary':
                return allPrizes;
            case 'mega':
                return allPrizes.filter(p => ['rare', 'epic', 'legendary'].includes(p.rarity));
            default:
                return allPrizes.slice(0, 8); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 8 –ø—Ä–∏–∑–æ–≤
        }
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—å—é –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è –∫–µ–π—Å–∞
    generateCasePreview(caseId) {
        const casePrizes = {
            'basic': [
                { emoji: 'üçé', name: '–Ø–±–ª–æ–∫–æ', rarity: 'common' },
                { emoji: 'üçå', name: '–ë–∞–Ω–∞–Ω', rarity: 'common' },
                { emoji: 'üçá', name: '–í–∏–Ω–æ–≥—Ä–∞–¥', rarity: 'uncommon' },
                { emoji: 'üçì', name: '–ö–ª—É–±–Ω–∏–∫–∞', rarity: 'rare' }
            ],
            'premium': [
                { emoji: 'üíé', name: '–ê–ª–º–∞–∑', rarity: 'rare' },
                { emoji: 'üëë', name: '–ö–æ—Ä–æ–Ω–∞', rarity: 'epic' },
                { emoji: 'üèÜ', name: '–ö—É–±–æ–∫', rarity: 'epic' },
                { emoji: '‚ö°', name: '–ú–æ–ª–Ω–∏—è', rarity: 'legendary' }
            ],
            'legendary': [
                { emoji: 'ü¶Ñ', name: '–ï–¥–∏–Ω–æ—Ä–æ–≥', rarity: 'legendary' },
                { emoji: 'üêâ', name: '–î—Ä–∞–∫–æ–Ω', rarity: 'legendary' },
                { emoji: '‚≠ê', name: '–ó–≤–µ–∑–¥–∞', rarity: 'mythic' },
                { emoji: 'üåü', name: '–°—É–ø–µ—Ä–∑–≤–µ–∑–¥–∞', rarity: 'mythic' }
            ],
            'mythic': [
                { emoji: 'üî•', name: '–û–≥–æ–Ω—å', rarity: 'mythic' },
                { emoji: '‚ùÑÔ∏è', name: '–õ–µ–¥', rarity: 'mythic' },
                { emoji: 'üåô', name: '–õ—É–Ω–∞', rarity: 'mythic' },
                { emoji: '‚òÄÔ∏è', name: '–°–æ–ª–Ω—Ü–µ', rarity: 'mythic' }
            ]
        };

        const prizes = casePrizes[caseId] || casePrizes['basic'];
        return prizes.map(prize => 
            `<div class="preview-item ${prize.rarity}">
                <span class="preview-emoji">${prize.emoji}</span>
                <span class="preview-name">${prize.name}</span>
            </div>`
        ).join('');
    }

    // –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    addToInventory(prize) {
        let inventory = JSON.parse(localStorage.getItem('playerInventory') || '[]');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∞—Ä–æ–∫ —Å timestamp
        const inventoryItem = {
            ...prize,
            id: Date.now() + Math.random(),
            timestamp: new Date().toISOString()
        };
        
        inventory.push(inventoryItem);
        localStorage.setItem('playerInventory', JSON.stringify(inventory));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        this.updateInventoryDisplay();
        
        console.log('üéÅ –ü–æ–¥–∞—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:', inventoryItem);
    }

    // –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    updateInventoryDisplay() {
        const inventoryGrid = document.getElementById('inventory-grid');
        if (!inventoryGrid) return;

        const inventory = JSON.parse(localStorage.getItem('playerInventory') || '[]');
        
        if (inventory.length === 0) {
            inventoryGrid.innerHTML = `
                <div class="inventory-empty">
                    <span class="empty-icon">üì¶</span>
                    <p>–ü–æ–¥–∞—Ä–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–æ–≤</p>
                </div>
            `;
        } else {
            inventoryGrid.innerHTML = inventory.map(item => `
                <div class="inventory-item ${item.rarity}">
                    <div class="inventory-emoji">${item.emoji}</div>
                    <div class="inventory-name">${item.name}</div>
                    <div class="inventory-rarity">${item.rarity}</div>
                </div>
            `).join('');
        }
    }
}

// Initialize cases manager immediately
window.casesManager = new CasesManager();

// Also initialize when DOM loads (backup)
document.addEventListener('DOMContentLoaded', () => {
    if (!window.casesManager) {
        window.casesManager = new CasesManager();
    }
});
// Cases functionality
class CasesManager {
    constructor() {
        this.loadCases();
        this.updateInventoryDisplay(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        this.setupEventListeners();
    }

    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–µ–≤—å—é
        const previewModal = document.getElementById('case-preview-modal');
        const closePreviewBtn = document.getElementById('close-preview-modal');
        const cancelBtn = document.getElementById('cancel-case-preview');
        const openFromPreviewBtn = document.getElementById('open-case-from-preview');

        if (closePreviewBtn) {
            closePreviewBtn.addEventListener('click', () => this.closePreviewModal());
        }

        if (cancelBtn) {
            cancelBtn.addEventListener('click', () => this.closePreviewModal());
        }

        if (openFromPreviewBtn) {
            openFromPreviewBtn.addEventListener('click', () => this.openCaseFromPreview());
        }

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ —Ñ–æ–Ω
        if (previewModal) {
            previewModal.addEventListener('click', (e) => {
                if (e.target === previewModal) {
                    this.closePreviewModal();
                }
            });
        }

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ ESC
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                if (previewModal && previewModal.style.display === 'flex') {
                    this.closePreviewModal();
                }
            }
        });
    }

    async initializeCases() {
        try {
            // Load available cases
            await this.loadCases();
        } catch (error) {
            console.error('Failed to initialize cases:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–µ–π—Å–æ–≤');
        }
    }

    async loadCases() {
        try {
            const response = await fetch('/api/cases');
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            
            // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∫–µ–π—Å–æ–≤ –Ω–∞–ø—Ä—è–º—É—é
            if (Array.isArray(data)) {
                this.renderCases(data);
            } else if (data.success) {
                this.renderCases(data.cases);
            } else {
                throw new Error(data.error || 'Failed to load cases');
            }
        } catch (error) {
            console.error('Error loading cases:', error);
            this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–µ–π—Å—ã');
        }
    }

    renderCases(cases) {
        console.log('Rendering cases:', cases); // Debug
        const casesGrid = document.getElementById('cases-grid');
        if (!casesGrid) {
            console.error('Cases grid not found!');
            return;
        }

        casesGrid.innerHTML = cases.map(caseData => `
            <div class="case-card ${caseData.rarity}" data-case-id="${caseData.id}">
                <div class="case-image">${caseData.image || caseData.emoji}</div>
                <div class="case-name">${caseData.name}</div>
                <div class="case-price">${caseData.price} ‚≠ê</div>
                <div class="case-description">${caseData.description}</div>
            </div>
        `).join('');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        console.log('Adding event listeners for', cases.length, 'cases'); // Debug
        cases.forEach(caseData => {
            const caseCard = casesGrid.querySelector(`[data-case-id="${caseData.id}"]`);
            if (caseCard) {
                console.log('Adding click listener for case', caseData.id); // Debug
                caseCard.addEventListener('click', () => {
                    console.log('Case clicked:', caseData.id); // Debug
                    this.showCasePreview(caseData);
                });
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –∏–Ω–¥–∏–∫–∞—Ü–∏—é —á—Ç–æ –º–æ–∂–Ω–æ –∫–ª–∏–∫–∞—Ç—å
                caseCard.style.cursor = 'pointer';
            } else {
                console.error('Case card not found for id:', caseData.id);
            }
        });
    }

    async openCase(caseId) {
        try {
            console.log('Opening case:', caseId); // Debug log
            
            let user = window.Telegram?.WebApp?.initDataUnsafe?.user;
            
            // For testing outside Telegram, use fake user
            if (!user) {
                user = { id: 123456, first_name: 'TestUser' };
                console.log('Using test user for development');
            }

            // Show opening modal
            this.showOpeningModal(caseId);

            // Request case opening
            const response = await fetch('/api/open-case', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    userId: user.id,
                    caseId: caseId
                })
            });

            const data = await response.json();

            if (data.success) {
                // Immediately update balance before animation
                if (data.newBalance !== undefined) {
                    const balanceElement = document.getElementById('balanceAmount');
                    if (balanceElement) {
                        balanceElement.textContent = data.newBalance;
                        console.log(`üí∞ –ë–∞–ª–∞–Ω—Å —Å—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª–µ–Ω: ${data.newBalance} –∑–≤–µ–∑–¥`);
                    }
                }
                
                // Start roulette animation
                this.startRouletteAnimation(data.result, data.allPossiblePrizes, data.newBalance);
            } else {
                this.closeModal();
                this.showError(data.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–µ–π—Å–∞');
            }

        } catch (error) {
            console.error('Error opening case:', error);
            this.closeModal();
            this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å');
        }
    }

    showOpeningModal(caseId) {
        const modal = document.getElementById('case-modal');
        const openingSection = document.getElementById('case-opening');
        const resultSection = document.getElementById('case-result');
        
        // Reset modal state
        openingSection.style.display = 'block';
        resultSection.style.display = 'none';
        resultSection.classList.remove('show');
        
        modal.style.display = 'flex';
        
        // Prevent body scroll
        document.body.style.overflow = 'hidden';
    }

    startRouletteAnimation(winningPrize, allPrizes, newBalance) {
        const rouletteItems = document.getElementById('roulette-items');
        
        // Generate extended roulette with repeating items
        const rouletteData = this.generateRouletteItems(winningPrize, allPrizes);
        
        // Render roulette items with more visual effects
        rouletteItems.innerHTML = rouletteData.items.map((item, index) => `
            <div class="roulette-item ${item.rarity}" data-index="${index}">
                <div class="roulette-emoji">${item.emoji}</div>
                <div class="roulette-name">${item.name}</div>
                <div class="rarity-glow ${item.rarity}"></div>
            </div>
        `).join('');

        // –£–ª—É—á—à–µ–Ω–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –∫–∞–∫ –≤ Gifts Battle
        const itemWidth = 96; // –£–≤–µ–ª–∏—á–∏–ª –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–∏–¥–∞
        const winningIndex = rouletteData.winningIndex;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ —Ü–µ–Ω—Ç—Ä–µ
        this.addRoulettePointer();
        
        // –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è - –¥–∞–ª–µ–∫–æ —Å–ª–µ–≤–∞
        rouletteItems.style.transition = 'none';
        rouletteItems.style.transform = 'translateX(400px)';
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π reflow
        rouletteItems.offsetHeight;
        
        // –†–∞—Å—á–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —É–∫–∞–∑–∞—Ç–µ–ª—è
        const containerCenter = rouletteItems.parentElement.offsetWidth / 2;
        const winningElementCenter = winningIndex * itemWidth + itemWidth / 2;
        const finalPosition = containerCenter - winningElementCenter;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–Ω—ã—Ö –æ–±–æ—Ä–æ—Ç–æ–≤ + —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å
        const extraSpins = 4 + Math.floor(Math.random() * 3); // 4-6 –ø–æ–ª–Ω—ã—Ö –æ–±–æ—Ä–æ—Ç–æ–≤
        const totalWidth = rouletteData.items.length * itemWidth;
        const randomOffset = (Math.random() - 0.5) * 20; // –ù–µ–±–æ–ª—å—à–æ–µ —Å–ª—É—á–∞–π–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ
        const moveDistance = finalPosition - (extraSpins * totalWidth) + randomOffset;

        console.log(`üé∞ –£–ª—É—á—à–µ–Ω–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è: –∏–Ω–¥–µ–∫—Å ${winningIndex}, –¥–∏—Å—Ç–∞–Ω—Ü–∏—è ${moveDistance}`);

        // –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã (–∏–º–∏—Ç–∞—Ü–∏—è)
        this.playRouletteSound();

        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–≤–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ñ–∞–∑–∞–º–∏
        setTimeout(() => {
            // –§–∞–∑–∞ 1: –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç
            rouletteItems.style.transition = 'transform 1s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
            rouletteItems.style.transform = `translateX(${moveDistance * 0.3}px)`;
            
            // –§–∞–∑–∞ 2: –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å
            setTimeout(() => {
                rouletteItems.style.transition = 'transform 1.5s cubic-bezier(0.23, 1, 0.32, 1)';
                rouletteItems.style.transform = `translateX(${moveDistance * 0.7}px)`;
                
                // –§–∞–∑–∞ 3: –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                setTimeout(() => {
                    rouletteItems.style.transition = 'transform 1.8s cubic-bezier(0.19, 1, 0.22, 1)';
                    rouletteItems.style.transform = `translateX(${moveDistance}px)`;
                }, 1500);
            }, 1000);
        }, 300);

        // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –≤—ã–∏–≥—Ä—ã—à–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        setTimeout(() => {
            this.highlightWinningItem(winningIndex);
        }, 4300);

        // Show result after complete animation 
        setTimeout(() => {
            this.showResult(winningPrize, newBalance);
        }, 5000); // 5 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø–æ–ª–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é
    }

    // –î–æ–±–∞–≤–∏—Ç—å —É–∫–∞–∑–∞—Ç–µ–ª—å —Ä—É–ª–µ—Ç–∫–∏
    addRoulettePointer() {
        const rouletteContainer = document.querySelector('.roulette-container');
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —É–∫–∞–∑–∞—Ç–µ–ª—å –µ—Å–ª–∏ –µ—Å—Ç—å
        const existingPointer = rouletteContainer.querySelector('.roulette-pointer');
        if (existingPointer) existingPointer.remove();
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —É–∫–∞–∑–∞—Ç–µ–ª—å
        const pointer = document.createElement('div');
        pointer.className = 'roulette-pointer';
        pointer.innerHTML = '‚ñº';
        rouletteContainer.appendChild(pointer);
    }

    // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –≤—ã–∏–≥—Ä—ã—à–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    highlightWinningItem(winningIndex) {
        const items = document.querySelectorAll('.roulette-item');
        const winningItem = items[winningIndex];
        
        if (winningItem) {
            winningItem.classList.add('winning-item');
            
            // –≠—Ñ—Ñ–µ–∫—Ç –ø—É–ª—å—Å–∞—Ü–∏–∏
            setTimeout(() => {
                winningItem.style.transform = 'scale(1.1)';
                winningItem.style.boxShadow = '0 0 20px rgba(255, 215, 0, 0.8)';
            }, 100);
        }
    }

    // –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã (–∏–º–∏—Ç–∞—Ü–∏—è —á–µ—Ä–µ–∑ console)
    playRouletteSound() {
        console.log('üîä –ó–≤—É–∫ —Ä—É–ª–µ—Ç–∫–∏: tick-tick-tick...');
    }

    generateRouletteItems(winningPrize, allPrizes) {
        const items = [];
        const totalItems = Math.min(allPrizes.length, 100); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–∑—ã (–¥–æ 100)
        
        // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –ø—Ä–∏–∑—ã –≤ —Ä—É–ª–µ—Ç–∫—É
        for (let i = 0; i < totalItems; i++) {
            items.push(allPrizes[i % allPrizes.length]);
        }
        
        // –í—Å—Ç–∞–≤–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã–π –ø—Ä–∏–∑ –≤ –∫–æ–Ω—Ü–µ (–¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞)
        const winningIndex = totalItems - Math.floor(Math.random() * 10) - 5; // –ë–ª–∏–∂–µ –∫ –∫–æ–Ω—Ü—É
        items[winningIndex] = winningPrize;
        
        return {
            items: items,
            winningIndex: winningIndex
        };
    }

    showResult(winningPrize, newBalance) {
        // Update balance display
        if (window.balanceManager) {
            window.balanceManager.updateBalance(newBalance);
        }

        // Add to inventory
        this.addToInventory(winningPrize);

        const modal = document.getElementById('case-modal');
        const opening = document.getElementById('case-opening');
        const result = document.getElementById('case-result');
        
        // Hide opening animation, show result
        opening.style.display = 'none';
        result.style.display = 'block';
        
        // Update result display
        document.getElementById('result-emoji').textContent = winningPrize.emoji;
        document.getElementById('result-name').textContent = winningPrize.name;
        document.getElementById('result-rarity').textContent = winningPrize.rarity;
        document.getElementById('result-rarity').className = `result-rarity ${winningPrize.rarity}`;

        console.log('üéâ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∫–∞–∑–∞–Ω:', winningPrize);
    }

    closeModal() {
        const modal = document.getElementById('case-modal');
        modal.style.display = 'none';
        document.body.style.overflow = '';
        
        // Reset roulette
        const rouletteItems = document.getElementById('roulette-items');
        if (rouletteItems) {
            rouletteItems.style.transform = 'translateX(0)';
        }
    }

    bindEvents() {
        // Close modal events
        const modal = document.getElementById('case-modal');
        const closeBtn = document.getElementById('close-case-modal');
        const openAnotherBtn = document.getElementById('open-another-case');
        
        if (closeBtn) {
            closeBtn.addEventListener('click', () => this.closeModal());
        }
        
        if (openAnotherBtn) {
            openAnotherBtn.addEventListener('click', () => this.closeModal());
        }
        
        // Close on background click
        if (modal) {
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    this.closeModal();
                }
            });
        }

        // ESC key to close
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && modal.style.display === 'flex') {
                this.closeModal();
            }
        });
    }

    showError(message) {
        // You can implement a toast notification system here
        alert(message);
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é –∫–µ–π—Å–∞
    async showCasePreview(caseData) {
        this.currentCaseData = caseData;
        
        const modal = document.getElementById('case-preview-modal');
        const title = document.getElementById('case-preview-title');
        const icon = document.getElementById('case-preview-icon');
        const price = document.getElementById('case-preview-price');
        const description = document.getElementById('case-preview-desc');
        const prizesGrid = document.getElementById('prizes-preview-grid');

        // –ó–∞–ø–æ–ª–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–µ–π—Å–µ
        title.textContent = caseData.name;
        icon.textContent = caseData.image || caseData.emoji;
        price.innerHTML = `${caseData.price} ‚≠ê`;
        description.textContent = caseData.description;

        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –∫–µ–π—Å–∞ –∏–∑ API
        try {
            const response = await fetch('/api/cases');
            const cases = await response.json();
            const casePrizes = this.getPrizesForCase(caseData.id);
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–µ—Ç–∫—É –ø—Ä–∏–∑–æ–≤
            prizesGrid.innerHTML = casePrizes.map(prize => `
                <div class="prize-preview-item ${prize.rarity}">
                    <span class="prize-emoji">${prize.emoji}</span>
                    <div class="prize-name">${prize.name}</div>
                </div>
            `).join('');

        } catch (error) {
            console.error('Error loading case prizes:', error);
            prizesGrid.innerHTML = '<div class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–∑–æ–≤</div>';
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª
        modal.style.display = 'flex';
        document.body.style.overflow = 'hidden';
    }

    // –ó–∞–∫—Ä—ã—Ç—å –ø—Ä–µ–≤—å—é –º–æ–¥–∞–ª
    closePreviewModal() {
        const modal = document.getElementById('case-preview-modal');
        modal.style.display = 'none';
        document.body.style.overflow = '';
        this.currentCaseData = null;
    }

    // –û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å –∏–∑ –ø—Ä–µ–≤—å—é
    openCaseFromPreview() {
        console.log('openCaseFromPreview called, currentCaseData:', this.currentCaseData); // Debug
        if (this.currentCaseData) {
            console.log('Closing preview and opening case:', this.currentCaseData.id); // Debug
            this.closePreviewModal();
            this.openCase(this.currentCaseData.id);
        } else {
            console.error('No currentCaseData set!'); // Debug
            alert('–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∫–µ–π—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–µ–π—Å–∞
    getPrizesForCase(caseId) {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ Telegram –ø–æ–¥–∞—Ä–∫–∏
        const allPrizes = [
            // –û–±—â–∏–µ –ø—Ä–∏–∑—ã
            { name: "50 –∑–≤–µ–∑–¥", emoji: "‚≠ê", rarity: "common" },
            { name: "100 –∑–≤–µ–∑–¥", emoji: "‚≠ê", rarity: "common" },
            { name: "–¢—é–ª—å–ø–∞–Ω", emoji: "üå∑", rarity: "common" },
            // –†–µ–¥–∫–∏–µ –ø—Ä–∏–∑—ã
            { name: "300 –∑–≤–µ–∑–¥", emoji: "üí´", rarity: "rare" },
            { name: "–¢–æ—Ä—Ç", emoji: "üéÇ", rarity: "rare" },
            { name: "–°–≤—è–∑–∫–∞ —à–∞—Ä–æ–≤", emoji: "üéà", rarity: "rare" },
            // –≠–ø–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–∑—ã
            { name: "1000 –∑–≤–µ–∑–¥", emoji: "üåü", rarity: "epic" },
            { name: "–ü–ª—é—à–µ–≤—ã–π –º–∏—à–∫–∞", emoji: "üß∏", rarity: "epic" },
            { name: "–ë—É–∫–µ—Ç —Ä–æ–∑", emoji: "üåπ", rarity: "epic" },
            // –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ –ø—Ä–∏–∑—ã
            { name: "–î–ñ–ï–ö–ü–û–¢ 5000‚≠ê", emoji: "üé∞", rarity: "legendary" },
            { name: "–ò–∑—É–º—Ä—É–¥", emoji: "üíé", rarity: "legendary" }
        ];

        // –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–µ–π—Å–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞–∑–Ω—ã–µ –Ω–∞–±–æ—Ä—ã –ø—Ä–∏–∑–æ–≤
        switch(caseId) {
            case 'basic':
                return allPrizes.filter(p => ['common', 'rare'].includes(p.rarity));
            case 'premium':
                return allPrizes.filter(p => ['common', 'rare', 'epic'].includes(p.rarity));
            case 'legendary':
                return allPrizes;
            case 'mega':
                return allPrizes.filter(p => ['rare', 'epic', 'legendary'].includes(p.rarity));
            default:
                return allPrizes.slice(0, 8); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 8 –ø—Ä–∏–∑–æ–≤
        }
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—å—é –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è –∫–µ–π—Å–∞
    generateCasePreview(caseId) {
        const casePrizes = {
            'basic': [
                { emoji: 'üçé', name: '–Ø–±–ª–æ–∫–æ', rarity: 'common' },
                { emoji: 'üçå', name: '–ë–∞–Ω–∞–Ω', rarity: 'common' },
                { emoji: 'üçá', name: '–í–∏–Ω–æ–≥—Ä–∞–¥', rarity: 'uncommon' },
                { emoji: 'üçì', name: '–ö–ª—É–±–Ω–∏–∫–∞', rarity: 'rare' }
            ],
            'premium': [
                { emoji: 'üíé', name: '–ê–ª–º–∞–∑', rarity: 'rare' },
                { emoji: 'üëë', name: '–ö–æ—Ä–æ–Ω–∞', rarity: 'epic' },
                { emoji: 'üèÜ', name: '–ö—É–±–æ–∫', rarity: 'epic' },
                { emoji: '‚ö°', name: '–ú–æ–ª–Ω–∏—è', rarity: 'legendary' }
            ],
            'legendary': [
                { emoji: 'ü¶Ñ', name: '–ï–¥–∏–Ω–æ—Ä–æ–≥', rarity: 'legendary' },
                { emoji: 'üêâ', name: '–î—Ä–∞–∫–æ–Ω', rarity: 'legendary' },
                { emoji: '‚≠ê', name: '–ó–≤–µ–∑–¥–∞', rarity: 'mythic' },
                { emoji: 'üåü', name: '–°—É–ø–µ—Ä–∑–≤–µ–∑–¥–∞', rarity: 'mythic' }
            ],
            'mythic': [
                { emoji: 'üî•', name: '–û–≥–æ–Ω—å', rarity: 'mythic' },
                { emoji: '‚ùÑÔ∏è', name: '–õ–µ–¥', rarity: 'mythic' },
                { emoji: 'üåô', name: '–õ—É–Ω–∞', rarity: 'mythic' },
                { emoji: '‚òÄÔ∏è', name: '–°–æ–ª–Ω—Ü–µ', rarity: 'mythic' }
            ]
        };

        const prizes = casePrizes[caseId] || casePrizes['basic'];
        return prizes.map(prize => 
            `<div class="preview-item ${prize.rarity}">
                <span class="preview-emoji">${prize.emoji}</span>
                <span class="preview-name">${prize.name}</span>
            </div>`
        ).join('');
    }

    // –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    addToInventory(prize) {
        let inventory = JSON.parse(localStorage.getItem('playerInventory') || '[]');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∞—Ä–æ–∫ —Å timestamp
        const inventoryItem = {
            ...prize,
            id: Date.now() + Math.random(),
            timestamp: new Date().toISOString()
        };
        
        inventory.push(inventoryItem);
        localStorage.setItem('playerInventory', JSON.stringify(inventory));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        this.updateInventoryDisplay();
        
        console.log('üéÅ –ü–æ–¥–∞—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:', inventoryItem);
    }

    // –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    updateInventoryDisplay() {
        const inventoryGrid = document.getElementById('inventory-grid');
        if (!inventoryGrid) return;

        const inventory = JSON.parse(localStorage.getItem('playerInventory') || '[]');
        
        if (inventory.length === 0) {
            inventoryGrid.innerHTML = `
                <div class="inventory-empty">
                    <span class="empty-icon">üì¶</span>
                    <p>–ü–æ–¥–∞—Ä–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–æ–≤</p>
                </div>
            `;
        } else {
            inventoryGrid.innerHTML = inventory.map(item => `
                <div class="inventory-item ${item.rarity}">
                    <div class="inventory-emoji">${item.emoji}</div>
                    <div class="inventory-name">${item.name}</div>
                    <div class="inventory-rarity">${item.rarity}</div>
                </div>
            `).join('');
        }
    }
}

// Initialize cases manager immediately
window.casesManager = new CasesManager();

// Also initialize when DOM loads (backup)
document.addEventListener('DOMContentLoaded', () => {
    if (!window.casesManager) {
        window.casesManager = new CasesManager();
    }
});